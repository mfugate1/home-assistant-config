automation:
  - alias: 'Ubiquiti APs - Check for Firmware Updates'
    id: update_ubiquiti_ap_firmware
    trigger:
      platform: time
      at: input_datetime.ubiquiti_aps_check_for_firmware_updates_time
    action:
      service: shell_command.unifi_api_cmd
      data:
        path: productinfo
        cmd: check-firmware-update

  - alias: 'Ubiquiti APs - Update Firmware'
    id: update_ubiquiti_ap_firmware
    trigger:
      platform: time
      at: input_datetime.ubiquiti_firmware_update
    condition:
      condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.ubiquiti_ap1_firmware_update_available
          state: 'on'
        - condition: state
          entity_id: binary_sensor.ubiquiti_ap2_firmware_update_available
          state: 'on'
    action:
      service: shell_command.unifi_api_cmd
      data:
        path: devmgr
        cmd: set-rollupgrade

input_datetime:
  ubiquiti_aps_check_for_firmware_updates_time:
    has_date: false
    has_time: true
  ubiquiti_aps_update_firmware_time:
    has_date: false
    has_time: true

sensor:
  - platform: command_line
    name: ubiquiti_ap1_status
    command: |-
      data='{"username":"${UNIFI_USERNAME}","password":"${UNIFI_PASSWORD}"}'; url='https://${UNIFI_IP}:${UNIFI_PORT}';\
      c=$(curl -H 'Content-Type: application/json' -d $data -ksc - $url/api/login -o /dev/null);\
      echo "${c}" | curl -ksb - $url/api/s/${UNIFI_SITE}/stat/device/${UBIQUITI_AP1_MAC}
    value_template: |-
      {% if value_json.meta.rc == 'error' %}
        {{ value }}
      {% else %}
        {% set json = value_json.data[0] %}
        {{ json["ip"] }}
        {{ json["mac"] }}
        {{ json["version"] }}
        {{ json["adopted"] }}
        {{ json["internet"] }}
        {{ json["last_seen"] }}
        {{ json["upgradable"] }}
        {{ json["uptime"] }}
        {{ json["num_sta"] }}
      {% endif %}
    scan_interval: 300
  - platform: command_line
    name: ubiquiti_ap2_status
    command: |-
      data='{"username":"${UNIFI_USERNAME}","password":"${UNIFI_PASSWORD}"}'; url='https://${UNIFI_IP}:${UNIFI_PORT}';\
      c=$(curl -H 'Content-Type: application/json' -d $data -ksc - $url/api/login -o /dev/null);\
      echo "${c}" | curl -ksb - $url/api/s/${UNIFI_SITE}/stat/device/${UBIQUITI_AP2_MAC}
    value_template: |-
      {% if value_json.meta.rc == 'error' %}
        {{ value }}
      {% else %}
        {% set json = value_json.data[0] %}
        {{ json["ip"] }}
        {{ json["mac"] }}
        {{ json["version"] }}
        {{ json["adopted"] }}
        {{ json["internet"] }}
        {{ json["last_seen"] }}
        {{ json["upgradable"] }}
        {{ json["uptime"] }}
        {{ json["num_sta"] }}
      {% endif %}
    scan_interval: 300

shell_command:
  unifi_api_cmd: >-
    data='{"username":"${UNIFI_USERNAME}","password":"${UNIFI_PASSWORD}"}'; url='https://${UNIFI_IP}:${UNIFI_PORT}';\
    c=$(curl -H 'Content-Type: application/json' -d $data -ksc - $url/api/login -o /dev/null);\
    echo "${c}" | curl -ksb - $url/api/s/${UNIFI_SITE}/cmd/{{ path }} -d '{"cmd": "{{ cmd }}"}'

template:
  - binary_sensor:
      - name: unifi_update_available
        state: "{{ states('sensor.unifi_latest_version') != state_attr('sensor.docker_unifi', 'image').split(':')[1] and is_state('binary_sensor.latest_unifi_image_available_on_docker_hub', 'on') }}"
      - name: ubiquiti_ap1_firmware_update_available
        state: "{{ states('sensor.ubiquiti_ap1_status').split('\n')[6] }}"
        attributes:
          ip: "{{ states('sensor.ubiquiti_ap1_status').split('\n')[0] }}"
          mac: "{{ states('sensor.ubiquiti_ap1_status').split('\n')[1] }}"
          version: "{{ states('sensor.ubiquiti_ap1_status').split('\n')[2] }}"
          adopted: "{{ states('sensor.ubiquiti_ap1_status').split('\n')[3] }}"
          internet: "{{ states('sensor.ubiquiti_ap1_status').split('\n')[4] }}"
          last_seen: "{{ states('sensor.ubiquiti_ap1_status').split('\n')[5] }}"
          uptime: "{{ states('sensor.ubiquiti_ap1_status').split('\n')[7] }}"
          num_sta: "{{ states('sensor.ubiquiti_ap1_status').split('\n')[8] }}"
        availability: "{{ states('sensor.ubiquiti_ap1_status').startswith('192') }}"
      - name: sensor.ubiquiti_ap2_firmware_update_available
        state: "{{ states('sensor.ubiquiti_ap2_status').split('\n')[6] }}"
        attributes:
          ip: "{{ states('sensor.ubiquiti_ap2_status').split('\n')[0] }}"
          mac: "{{ states('sensor.ubiquiti_ap2_status').split('\n')[1] }}"
          version: "{{ states('sensor.ubiquiti_ap2_status').split('\n')[2] }}"
          adopted: "{{ states('sensor.ubiquiti_ap2_status').split('\n')[3] }}"
          internet: "{{ states('sensor.ubiquiti_ap2_status').split('\n')[4] }}"
          last_seen: "{{ states('sensor.ubiquiti_ap2_status').split('\n')[5] }}"
          uptime: "{{ states('sensor.ubiquiti_ap2_status').split('\n')[7] }}"
          num_sta: "{{ states('sensor.ubiquiti_ap2_status').split('\n')[8] }}"
        availability: "{{ states('sensor.ubiquiti_ap2_status').startswith('192') }}"
