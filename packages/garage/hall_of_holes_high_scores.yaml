automation:
  - alias: Hall of Holes - Load Players
    id: hall_of_holes_load_players
    mode: queued
    triggers:
      - trigger: homeassistant
        event: start
    actions:
      - event: reload_hall_of_holes_player_id_mapping

  - alias: Hall of Holes - Winner Selected
    id: hall_of_holes_winner_selected
    mode: queued
    triggers:
      - trigger: state
        entity_id:
          - input_boolean.hall_of_holes_winner_player_1
          - input_boolean.hall_of_holes_winner_player_2
          - input_boolean.hall_of_holes_winner_player_3
          - input_boolean.hall_of_holes_winner_player_4
        to: 'on'
    actions:
      - action: input_boolean.turn_off
        target:
          entity_id: >
            {% set my_id = trigger.entity_id.split('_')[-1] | int %}
            {% set ns = namespace(entities=[]) %}
            {% for i in range(1, 5) %}
              {% if i != my_id %}
                {% set ns.entities = ns.entities + ['input_boolean.hall_of_holes_winner_player_' + i | string] %}
              {% endif %}
            {% endfor %}
            {{ ns.entities }}
script:
  hall_of_holes_add_player:
    alias: Hall of Holes - Add Player
    mode: queued
    fields:
      browser_id:
        description: The browser ID this script is being called from
        default: hall-of-holes-tablet
    sequence:
      - variables:
          new_name: "{{ states('input_text.hall_of_holes_add_player_name') }}"
      - action: notify.hall_of_holes_db
        data:
          message: "CREATE TABLE IF NOT EXISTS players (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(64))"
      - action: mysql_query.query
        response_variable: existing_players_query
        data:
          query: SELECT name FROM players
      - if: "{{ new_name in (existing_players_query.result | map(attribute='name') | list) }}"
        then:
          - action: browser_mod.popup
            data:
              browser_id: "{{ browser_id }}"
              content: Player already exists in database.
        else:
          - action: notify.hall_of_holes_db
            data:
              message: "INSERT INTO players (name) VALUES ('{{ new_name }}')"
          - action: input_text.set_value
            entity_id: input_text.hall_of_holes_add_player_name
            data:
              value: ''
          - action: automation.trigger
            entity_id: automation.hall_of_holes_load_players

input_boolean:
  hall_of_holes_winner_player_1:
  hall_of_holes_winner_player_2:
  hall_of_holes_winner_player_3:
  hall_of_holes_winner_player_4:

input_select:
  hall_of_holes_games:
    name: Games
    options:
      - Air Hockey
      - Basketball
      - Darts
      - Pinball
      - Pool
      - Skeeball
  hall_of_holes_pool_game_types:
    name: Game Type
    options:
      - Standard
      - Teams
      - Cutthroat
  
input_text:
  hall_of_holes_add_player_name:
    name: Enter new player name here
  hall_of_holes_player_1:
  hall_of_holes_player_2:
  hall_of_holes_player_3:
  hall_of_holes_player_4:

template:
  - trigger:
      - trigger: event
        event_type: reload_hall_of_holes_player_id_mapping
    action:
      - action: mysql_query.query
        response_variable: query
        data:
          query: SELECT id, name FROM players
    sensor:
      # Query result is stored in an attribute to avoid the 255 character limit on states
      - name: hall_of_holes_player_id_mapping
        state: no_state
        attributes:
          mapping: "{{ query.result }}"
  - select:
      - name: hall_of_holes_player_1
        unique_id: hall_of_holes_player_1
        state: "{{ states('input_text.hall_of_holes_player_1') }}"
        options: >
          {% from 'hall_of_holes.jinja' import get_player_list %}
          {{ get_player_list(1) }}
        select_option:
          action: input_text.set_value
          entity_id: input_text.hall_of_holes_player_1
          data:
            value: "{{ option }}"
      - name: hall_of_holes_player_2
        unique_id: hall_of_holes_player_2
        state: "{{ states('input_text.hall_of_holes_player_2') }}"
        options: >
          {% from 'hall_of_holes.jinja' import get_player_list %}
          {{ get_player_list(2) }}
        select_option:
          action: input_text.set_value
          entity_id: input_text.hall_of_holes_player_2
          data:
            value: "{{ option }}"
      - name: hall_of_holes_player_3
        unique_id: hall_of_holes_player_3
        state: "{{ states('input_text.hall_of_holes_player_3') }}"
        options: >
          {% from 'hall_of_holes.jinja' import get_player_list %}
          {{ get_player_list(3) }}
        select_option:
          action: input_text.set_value
          entity_id: input_text.hall_of_holes_player_3
          data:
            value: "{{ option }}"
      - name: hall_of_holes_player_4
        unique_id: hall_of_holes_player_4
        state: "{{ states('input_text.hall_of_holes_player_4') }}"
        options: >
          {% from 'hall_of_holes.jinja' import get_player_list %}
          {{ get_player_list(4) }}
        select_option:
          action: input_text.set_value
          entity_id: input_text.hall_of_holes_player_4
          data:
            value: "{{ option }}"