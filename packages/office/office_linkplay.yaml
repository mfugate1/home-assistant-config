group:
  office_music_presence:
    entities:
      - binary_sensor.master_bathroom_presence_all_zones
      - binary_sensor.master_bedroom_presence_all_zones
      - binary_sensor.office_presence_all_zones

script:
  office_audio_spotify:
    alias: Office Audio - Spotify
    mode: queued
    sequence:
      - variables:
          last_playlist: "{{ states('input_text.linkplay_last_spotify_playlist') }}"
          linkplay_master: "{{ states('select.linkplay_group_master') }}"
          linkplay_office: "{{ states('select.office_linkplay_entity') }}"
          linkplay_spotify_source: "{{ states('select.linkplay_spotify_source') }}"
          spotify_entity: "{{ states('select.spotify_entity') }}"

      - alias: Add office linkplay to master
        service: linkplay.join
        data:
          master: "{{ linkplay_master }}"
          entity_id: "{{ linkplay_office }}"

      - alias: Select linkplay source for spotify
        service: media_player.select_source
        target:
          entity_id: "{{ spotify_entity }}"
        data:
          source: "{{ linkplay_spotify_source }}"
      
      - alias: Delay to let master linkplay sort itself out before trying to play anything
        delay: "{{ states('input_number.linkplay_delay_after_selecting_spotify_source') | int(1) }}"

      - if:
        - alias: If spotify is not playing
          condition: template
          value_template: "{{ not is_state(spotify_entity, 'playing') }}"
        then:
        - if:
          - alias: If spotify already has a playlist queued up
            condition: template
            value_template: "{{ state_attr(spotify_entity, 'media_playlist') }}"
          then:
          - alias: Play it
            service: media_player.media_play
            target:
              entity_id: "{{ spotify_entity }}"
          else:
          - alias: Play last known spotify playlist
            service: media_player.play_media
            target:
              entity_id: "{{ spotify_entity }}"
            data:
              media_content_type: playlist
              media_content_id: "{{ last_playlist }}"

        - alias: Turn shuffle on
          service: media_player.shuffle_set
          target:
            entity_id: "{{ spotify_entity }}"
          data:
            shuffle: true

  office_audio_pc:
    alias: Office Audio - PC
    mode: queued
    sequence:
      - alias: Ungroup office linkplay
        service: linkplay.unjoin
        data:
          entity_id: "{{ states('input_text.office_linkplay_entity') }}"
      - alias: Switch office linkplay source to Line In
        service: media_player.select_source
        target:
          entity_id: "{{ states('input_text.office_linkplay_entity') }}"
        data:
          source: "{{ states('input_text.office_linkplay_pc_source') }}"

input_text:
  office_linkplay_entity:
  office_linkplay_pc_source:

template:
  - binary_sensor:
    - name: office_linkplay_in_group
      state: "{{ state_attr(office_audio_entity, 'group_members') != None }}"

  - select:
    - name: office_linkplay_entity
      unique_id: office_linkplay_entity
      state: "{{ states('input_text.office_linkplay_entity') }}"
      options: "{{ states('sensor.linkplay_media_players') | from_json }}"
      select_option:
        service: input_text.set_value
        entity_id: input_text.office_linkplay_entity
        data:
          value: "{{ option }}"

    - name: office_linkplay_pc_source
      unique_id: office_linkplay_pc_source
      state: "{{ states('input_text.office_linkplay_pc_source') }}"
      options: "{{ state_attr(states('input_text.office_linkplay_entity'), 'source_list') }}"
      select_option:
        service: input_text.set_value
        entity_id: input_text.office_linkplay_pc_source
        data:
          value: "{{ option }}"