group:
  office_music_presence:
    entities:
      - binary_sensor.master_bathroom_presence_all_zones
      - binary_sensor.master_bedroom_presence_all_zones
      - binary_sensor.office_presence_all_zones

script:
  office_audio_spotify:
    alias: Office Audio - Spotify
    mode: queued
    sequence:
      - variables:
          linkplay_master: "{{ states('select.linkplay_group_master') }}"
          linkplay_office: "{{ states('select.office_linkplay_entity') }}"
          spotify_device_id: "{{ states('input_text.spotify_device_id') }}"
          spotify_device_name: "{{ states('input_text.spotify_device_name') }}"
          spotify_entity: "{{ states('select.spotify_entity') }}"
      - if: "{{ is_state('switch.office_speakers', 'off') }}"
        then:
          - action: switch.turn_on
            entity_id: switch.office_speakers
      - action: linkplay.join
        data:
          master: "{{ linkplay_master }}"
          entity_id: "{{ linkplay_office }}"
      - if: "{{ not is_state(spotify_entity, 'playing') or not is_state_attr(spotify_entity, 'source', spotify_device_name)}}"
        then:
          - action: retry.call
            data:
              service: spotcast.start
              spotify_device_id: "{{ spotify_device_id }}"
              force_playback: true
      - action: retry.call
        data:
          service: media_player.shuffle_set
          shuffle: true
        target:
          entity_id: "{{ spotify_entity }}"

  office_audio_pc:
    alias: Office Audio - PC
    mode: queued
    sequence:
      - if: "{{ is_state('switch.office_speakers', 'off') }}"
        then:
          - action: switch.turn_on
            entity_id: switch.office_speakers
      - action: linkplay.unjoin
        data:
          entity_id: "{{ states('input_text.office_linkplay_entity') }}"
      - action: media_player.select_source
        target:
          entity_id: "{{ states('input_text.office_linkplay_entity') }}"
        data:
          source: "{{ states('input_text.office_linkplay_pc_source') }}"

input_text:
  office_linkplay_entity:
  office_linkplay_pc_source:

template:
  - binary_sensor:
    - name: office_linkplay_in_group
      state: "{{ state_attr(office_audio_entity, 'group_members') != None }}"

  - select:
    - name: office_linkplay_entity
      unique_id: office_linkplay_entity
      state: "{{ states('input_text.office_linkplay_entity') }}"
      options: "{{ states('sensor.linkplay_media_players') | from_json }}"
      select_option:
        action: input_text.set_value
        entity_id: input_text.office_linkplay_entity
        data:
          value: "{{ option }}"

    - name: office_linkplay_pc_source
      unique_id: office_linkplay_pc_source
      state: "{{ states('input_text.office_linkplay_pc_source') }}"
      options: "{{ state_attr(states('input_text.office_linkplay_entity'), 'source_list') }}"
      select_option:
        action: input_text.set_value
        entity_id: input_text.office_linkplay_pc_source
        data:
          value: "{{ option }}"