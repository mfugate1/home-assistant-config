automation:
  - alias: Office Laptop - Turn Off Dock
    id: office_laptop_turn_off_dock
    mode: queued
    triggers:
      - trigger: state
        entity_id: binary_sensor.office_presence_all_zones
        to: 'off'
        for:
          minutes: "{{ states('input_number.office_presence_timeout_for_laptop_dock') | int(1) }}"
      - trigger: state
        entity_id: binary_sensor.laptop_is_on_or_charging
        to: 'off'
        for:
          minutes: "{{ states('input_number.office_laptop_off_timeout_for_laptop_dock') | int(1) }}"
    conditions:
      - condition: state
        entity_id: binary_sensor.office_presence_all_zones
        state: 'off'
        for:
          minutes: "{{ states('input_number.office_presence_timeout_for_laptop_dock') | int(1) }}"
      - condition: state
        entity_id: binary_sensor.laptop_is_on_or_charging
        state: 'off'
        for:
          minutes: "{{ states('input_number.office_laptop_off_timeout_for_laptop_dock') | int(1) }}"
      - condition: state
        entity_id: switch.laptop_dock
        state: 'on'
    actions:
      - action: switch.turn_off
        entity_id: switch.laptop_dock

  - alias: Office - Turn Off Monitors
    id: office_turn_off_monitors
    mode: queued
    triggers:
      - trigger: state
        entity_id: binary_sensor.office_presence_all_zones
        to: 'off'
        for:
          minutes: "{{ states('input_number.office_presence_timeout_for_monitors') | int(1) }}"
      - trigger: state
        entity_id: binary_sensor.laptop_is_on_or_charging
        to: 'off'
        for:
          minutes: "{{ states('input_number.office_laptop_off_timeout_for_monitors') | int(1) }}"
      - trigger: state
        entity_id: binary_sensor.desktop_pc
        to: 'off'
        for:
          minutes: "{{ states('input_number.office_desktop_pc_off_timeout_for_monitors') | int(1) }}"
    conditions:
      - condition: state
        entity_id: binary_sensor.office_presence_all_zones
        state: 'off'
        for:
          minutes: "{{ states('input_number.office_presence_timeout_for_monitors') | int(1) }}"
      - condition: state
        entity_id: binary_sensor.laptop_is_on_or_charging
        state: 'off'
        for:
          minutes: "{{ states('input_number.office_laptop_off_timeout_for_monitors') | int(1) }}"
      - condition: state
        entity_id: binary_sensor.desktop_pc
        state: 'off'
        for:
          minutes: "{{ states('input_number.office_desktop_pc_off_timeout_for_monitors') | int(1) }}"
      - condition: state
        entity_id: switch.office_monitors
        state: 'on'
    actions:
      - action: switch.turn_off
        entity_id: switch.office_monitors

input_number:
  amp_threshold_for_laptop_to_be_considered_off:
    min: 0
    max: 2
    step: 0.01
    mode: box
    unit_of_measurement: A
  office_presence_timeout_for_laptop_dock: &timeout_m
    min: 0
    max: 10
    mode: box
    unit_of_measurement: m
  office_laptop_off_timeout_for_laptop_dock: *timeout_m
  office_presence_timeout_for_monitors: *timeout_m
  office_laptop_off_timeout_for_monitors: *timeout_m
  office_desktop_pc_off_timeout_for_monitors: *timeout_m
  office_laptop_turn_on_delay_after_monitors: &timeout_s
    min: 0
    max: 60
    mode: box
    unit_of_measurement: s
  office_laptop_turn_on_delay_after_dock: *timeout_s

script:
  office_laptop_turn_on:
    alias: Office Laptop - Turn On
    mode: queued
    sequence:
      - condition: "{{ is_state('binary_sensor.laptop_is_on_or_charging', 'off') }}"
      - if: "{{ is_state('switch.office_monitors', 'off') }}"
        then:
          - action: switch.turn_on
            entity_id: switch.office_monitors
          - delay: "{{ states('input_number.office_laptop_turn_on_delay_after_monitors') | int(10) }}"
      - if: "{{ is_state('switch.laptop_dock', 'off') }}"
        then:
          - action: switch.turn_on
            entity_id: switch.laptop_dock
          - delay: "{{ states('input_number.office_laptop_turn_on_delay_after_dock') | int(10) }}"
      - action: button.press
        entity_id: button.laptop_wol

template:
  - binary_sensor:
    - name: laptop_is_on_or_charging
      state: "{{ states('sensor.laptop_dock_electric_consumption_a') | float > states('input_number.amp_threshold_for_laptop_to_be_considered_off') | float }}"