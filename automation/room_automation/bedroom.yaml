- alias: 'Bedroom light on'
  id: bedroom_light_on
  trigger:
    platform: state
    entity_id: group.bedroom_occupancy
    to: 'on'
  condition:
    - condition: state
      entity_id: 
        - binary_sensor.bed_occupied
        - input_boolean.sleep_mode
      state: 'off'
    - condition: state
      entity_id: binary_sensor.bedroom_door
      state: 'on'
    - condition: state
      entity_id: person.mike
      state: home
  action:
    service: light.turn_on
    target:
      entity_id: light.bedroom_overhead

- alias: 'Bedroom lights off'
  id: bedroom_lights_off
  trigger:
    - platform: state
      entity_id: group.bedroom_occupancy
      to: 'off'
      for: &timeouts
        minutes: "{{ (states('input_number.bedroom_quick_timeout_minutes') if is_state('input_boolean.single_occupancy_mode', 'on') else states('input_number.bedroom_occupancy_timeout_minutes')) | int }}"
        seconds: "{{ (states('input_number.bedroom_quick_timeout_seconds') if is_state('input_boolean.single_occupancy_mode', 'on') else states('input_number.bedroom_occupancy_timeout_seconds')) | int }}"
    - platform: state
      entity_id: sensor.last_occupied_room
  condition:
    - condition: template
      value_template: >-
        {% set type = 'quick' if is_state('input_boolean.single_occupancy_mode', 'on') else 'occupancy' %}
        {% set timeout = (states('input_number.bedroom_' + type + '_timeout_minutes') | int) * 60 + (states('input_number.bedroom_' + type + '_timeout_seconds') | int) %}
        {{ (now() - states.group.bedroom_occupancy.last_updated).total_seconds() > timeout }}
    - condition: state
      entity_id: group.bedroom_occupancy
      state: 'off'
    - condition: not
      conditions:
        - condition: state
          entity_id: sensor.last_occupied_room
          state: bedroom
  action:
    service: light.turn_off
    target:
      entity_id: &allLights
        - light.bedroom_lamps
        - light.bedroom_overhead

- alias: 'Bedroom light switch to lamps if door closed'
  id: bedroom_light_switch_to_lamps_if_door_closed
  trigger:
    platform: state
    entity_id: binary_sensor.bedroom_door
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.sleep_mode
    state: 'off'
  action:
    - service: light.turn_on
      target:
        entity_id: light.bedroom_lamps
    - delay: 10
    - service: light.turn_off
      target:
        entity_id: light.bedroom_overhead

- alias: 'Sleep mode button toggle'
  id: sleep_mode_button_toggle
  mode: single
  max_exceeded: silent
  trigger:
    platform: event
    event_type: zwave_js_value_notification
    event_data:
      node_id: 20
      label: 'Scene 001'
  condition: "{{ trigger.event.data.value != 'KeyReleased' }}"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.sleep_mode
              state: 'off'
          sequence:
            - service: light.turn_off
              target:
                entity_id: *allLights
            - service: switch.turn_on
              target:
                entity_id: "switch.bedroom_{{ 'fan' if trigger.event.data.value == 'KeyPressed' else 'noise_machine' }}"
      default:
        - service: light.turn_on
          target:
            entity_id: light.bedroom_lamps
          data:
            brightness: "{{ states('input_number.bedroom_wake_up_lamp_brightness') | int }}"
            transition: "{{ states('input_number.bedroom_wake_up_lamp_transition') | int }}"
        - service: switch.turn_off
          target:
            entity_id: 
              - switch.bedroom_fan
              - switch.bedroom_noise_machine
    - service: input_boolean.toggle
      target:
        entity_id: input_boolean.sleep_mode
    - delay: 2

- alias: 'Bedroom remote toggle buttons'
  id: bedroom_remote_toggle_buttons
  mode: single
  max_exceeded: silent
  trigger:
    platform: event
    event_type: zwave_js_value_notification
    event_data:
      node_id: 20
  condition: "{{ trigger.event.data.label not in ('Scene 001', 'Scene 004') and trigger.event.data.value != 'KeyReleased' }}"
  action:
    - service: homeassistant.toggle
      target:
        entity_id: >-
          {% if trigger.event.data.label == 'Scene 002' %}
            light.bedroom_{{ 'overhead' if trigger.event.data.value == 'KeyPressed' else 'lamps' }}
          {% else %}
            switch.bedroom_{{ 'fan' if trigger.event.data.value == 'KeyPressed' else 'noise_machine' }}
          {% endif %}
    - delay: 2

- alias: 'Bedroom remote bed presets'
  id: bedroom_remote_bed_presets
  mode: single
  max_exceeded: silent
  trigger:
    platform: event
    event_type: zwave_js_value_notification
    event_data:
      node_id: 20
      label: 'Scene 004'
  condition: "{{ trigger.event.data.value != 'KeyReleased' }}"
  action:
    service: input_select.select_option
    target:
      entity_id: >-
        {% if is_state('input_select.bed_presets', 'Flat') %}
          {{ 'Read' if trigger.event.data.value == 'KeyPressed' else 'Watch TV' }}
        {% else %}
          Flat
        {% endif %}