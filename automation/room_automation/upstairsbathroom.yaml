- alias: Upstairs Bathroom - Lights On
  id: upstairs_bathroom_lights_on
  trigger:
    platform: state
    entity_id: group.upstairsbathroom_occupancy
    to: "on"
  condition:
    - condition: state
      entity_id: light.upstairsbathroom
      state: "off"
    - condition: state
      entity_id: person.mike
      state: home
  action:
    service: light.turn_on
    entity_id: light.upstairsbathroom
    data:
      brightness: "{{ states('sensor.upstairsbathroom_light_brightness')}}"
      transition: "{{ states('input_number.upstairsbathroom_light_transition')}}"

- alias: Upstairs Bathroom - Lights Off
  id: upstairs_bathroom_lights_off
  trigger:
    - platform: state
      entity_id: group.upstairsbathroom_occupancy
      to: "off"
      for:
        seconds: "{{ states('input_number.upstairsbathroom_occupancy_timeout_seconds') | int(0) }}"
    - platform: state
      entity_id: group.upstairsbathroom_occupancy
      to: "off"
      for:
        seconds: "{{ states('input_number.upstairsbathroom_occupancy_timeout_so_seconds') | int(0) }}"
    - platform: state
      entity_id: group.upstairsbathroom_occupancy
      to: "off"
      for:
        minutes: "{{ states('input_number.upstairsbathroom_door_closed_occupancy_timeout_minutes') | int(0) }}"
    - platform: state
      entity_id: binary_sensor.upstairsbathroom_door
      to: "on"
    - platform: state
      entity_id: sensor.last_occupied_room
  condition:
    - condition: or
      conditions:
        - condition: and
          conditions:
            - condition: state
              entity_id: binary_sensor.upstairsbathroom_door
              state: "on"
            - condition: template
              value_template: >-
                {% set timeout = states('sensor.upstairsbathroom_occupancy_timeout_seconds') | int(0) %}
                {{ (now() - states.group.upstairsbathroom_occupancy.last_updated).total_seconds() >= timeout }}
        - condition: and
          conditions:
            - condition: state
              entity_id: binary_sensor.upstairsbathroom_door
              state: "off"
            - condition: template
              value_template: >-
                {% set timeout = (states('input_number.upstairsbathroom_door_closed_occupancy_timeout_minutes') | int(0)) * 60 %}
                {{ (now() - states.group.upstairsbathroom_occupancy.last_updated).total_seconds() >= timeout }}
    - condition: state
      entity_id: group.upstairsbathroom_occupancy
      state: "off"
    - condition: not
      conditions:
        - condition: state
          entity_id: sensor.last_occupied_room
          state: upstairsbathroom
  action:
    service: light.turn_off
    entity_id: light.upstairsbathroom

- alias: Upstairs Bathroom - Vent Control
  id: upstairs_bathroom_vent_control
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.upstairsbathroom_door
        - sensor.upstairsbathroom_humidity
        - input_number.upstairsbathroom_vent_humidity_threshold
  action:
    service: >-
      {% if is_state('binary_sensor.upstairsbathroom_door', 'on') and (states('sensor.upstairsbathroom_humidity') | int(0)) < (states('input_number.upstairsbathroom_vent_humidity_threshold') | int(0)) %}
        switch.turn_off
      {% else %}
        switch.turn_on
      {% endif %}
    entity_id: switch.upstairsbathroom_vent
