- alias: 'Vacuum: Run When No One is Home'
  id: vacuum_run_when_no_one_is_home
  max_exceeded: silent
  trigger:
    - platform: state
      entity_id: person.mike
      to: not_home
      for:
        minutes: "{{ states('input_number.run_vacuum_after_away_min') }}"
    - platform: state
      entity_id: input_boolean.workout_mode
      to: 'on'
    - platform: state
      entity_id: vacuum.roborock_s6_pure
      to: docked
    - platform: state
      entity_id: input_boolean.sleep_mode
      to: 'on'
      for:
        hours: "{{ states('input_number.run_vacuum_after_asleep_min') }}"
    - platform: state
      entity_id: input_number.vacuum_rooms_cleaned_since_being_emptied
      to: 0
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: person.mike
        state: not_home
      - condition: state
        entity_id: input_boolean.workout_mode
        state: 'on'
      - condition: and
        conditions:
          - condition: state
            entity_id: input_boolean.sleep_mode
            state: 'on'
          - condition: time
            before: input_datetime.vacuum_night_cleaning_end_time
            after: input_datetime.sleep_mode_last_start_time
  action:
    - alias: 'Check that the vacuum is not already running'
      condition: state
      entity_id: vacuum.roborock_s6_pure
      state: docked
    - alias: 'Check that the vacuum does not need to be emptied'
      condition: state
      entity_id: input_boolean.empty_vacuum
      state: 'off'
    - alias: 'Check that next room is not set to none'
      condition: not
      conditions:
        - condition: state
          entity_id: sensor.vacuum_next_room_to_clean
          state: none

    # Avoid setting fan speed if it's already at the correct speed because every time vacuum.set_fan_speed is called, it makes a loud DING
    - alias: 'Change the fan speed based on sleep mode'
      choose:
        - alias: 'If sleep mode on and fan speed not set to night speed, set it to night speed'
          conditions:
            - condition: state
              entity_id: input_boolean.sleep_mode
              state: 'on'
            - "{{ state_attr('vacuum.roborock_s6_pure', 'fan_speed') != states('input_select.vacuum_fan_speed_night') }}"
          sequence:
            - service: vacuum.set_fan_speed
              target:
                entity_id: vacuum.roborock_s6_pure
              data:
                fan_speed: "{{ states('input_select.vacuum_fan_speed_night') }}"
        - alias: 'If sleep mode off and fan speed not set to day speed, set it to day speed'
          conditions:
            - condition: state
              entity_id: input_boolean.sleep_mode
              state: 'off'
            - "{{ state_attr('vacuum.roborock_s6_pure', 'fan_speed') != states('input_select.vacuum_fan_speed_day') }}"
          sequence:
            - service: vacuum.set_fan_speed
              target:
                entity_id: vacuum.roborock_s6_pure
              data:
                fan_speed: "{{ states('input_select.vacuum_fan_speed_day') }}"
    - alias: 'Start vacuum'
      service: xiaomi_miio.vacuum_clean_segment
      target:
        entity_id: vacuum.roborock_s6_pure
      data:
        segments: "{{ states('sensor.vacuum_next_room_to_clean').split('_')[1] }}"
    - alias: 'Set last room cleaned input text'
      service: input_text.set_value
      target:
        entity_id: input_text.vacuum_last_room_cleaned
      data:
        value: "{{ states('sensor.vacuum_next_room_to_clean') }}"
    - alias: 'Increment rooms cleaned counter'
      service: input_number.increment
      target:
        entity_id: input_number.vacuum_rooms_cleaned_since_being_emptied
    - alias: 'Set last cleaned datetime'
      service: input_datetime.set_datetime
      target:
        entity_id: "input_datetime.vacuum_{{ states('input_text.vacuum_last_room_cleaned') }}_last_cleaned"
      data:
        timestamp: "{{ now().timestamp() }}"
    - alias: 'Turn on cleaned today input boolean'
      service: input_boolean.turn_on
      target:
        entity_id: "input_boolean.vacuum_{{ states('input_text.vacuum_last_room_cleaned') }}_cleaned_today"

- alias: 'Vacuum: Enable/Disable All Rooms'
  id: vacuum_enable_disable_all_rooms
  trigger:
    platform: state
    entity_id: input_boolean.vacuum_enable_all_rooms
  action:
    service: "input_boolean.turn_{{ trigger.to_state.state }}"
    target:
      entity_id: >-
        {% set entities = namespace(ids=[]) %}
        {% for state in states.input_boolean %}
          {% if state.entity_id.startswith('input_boolean.vacuum') and state.entity_id.endswith('_enable') %}
            {% set entities.ids = entities.ids + [state.entity_id] %}
          {% endif %}
        {% endfor %}
        {{ entities.ids }}

- alias: 'Vacuum: Reset room cleaned today input booleans'
  id: vacuum_reset_room_cleaned_today_input_booleans
  trigger:
    platform: time
    at: input_datetime.vacuum_room_cleaned_today_reset_time
  action:
    service: input_boolean.turn_off
    target:
      entity_id: >-
        {% set entities = namespace(ids=[]) %}
        {% for state in states.input_boolean %}
          {% if state.entity_id.startswith('input_boolean.vacuum') and state.entity_id.endswith('_cleaned_today') %}
            {% set entities.ids = entities.ids + [state.entity_id] %}
          {% endif %}
        {% endfor %}
        {{ entities.ids }}

- alias: 'Vacuum: Empty bin notification'
  id: vacuum_empty_bin_notification
  trigger:
    platform: state
    entity_id:
      - input_number.vacuum_max_rooms_cleaned_before_emptying
      - input_number.vacuum_rooms_cleaned_since_being_emptied
  condition: "{{ ( states('input_number.vacuum_rooms_cleaned_since_being_emptied') | int) >= ( states('input_number.vacuum_max_rooms_cleaned_before_emptying') | int)}}"
  action:
    service: input_boolean.turn_on
    target:
      entity_id: input_boolean.empty_vacuum
    
- alias: 'Vacuum: Reset rooms cleaned counter'
  id: vacuum_reset_rooms_cleaned_counter
  trigger:
    platform: state
    entity_id: input_boolean.empty_vacuum
    to: 'off'
  action:
    service: input_number.set_value
    target:
      entity_id: input_number.vacuum_rooms_cleaned_since_being_emptied
    data:
      value: 0
