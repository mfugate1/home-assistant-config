type: entities
view_layout:
  grid-area: exercise
card_mod:
  style: |
    ha-card {
      border-radius: 10px;
    }
entities:
  - type: button
    name: Exercise Progress
    action_name: sync
    tap_action:
      action: call-service
      service: automation.trigger
      service_data:
        entity_id: automation.run_garmin_update_in_jenkins
  - type: custom:config-template-card
    variables:
      TYPE: "'run'"
      getDisplay: &getMileageDisplay |
        type => {
          var current_mileage = parseFloat(states['sensor.' + type + '_mileage_today'].state)
          var required_mileage = parseFloat(states['sensor.required_' + type + '_mileage_for_today'].state)
          if (current_mileage >= required_mileage - 0.1) {
            return 'DONE! (' + current_mileage + ' miles)'
          } else {
            return current_mileage + ' / ' + required_mileage + ' miles completed'
          }
        }
    entities: &mileageEntities
      - "${'sensor.required_' + TYPE + '_mileage_for_today'}"
      - "${'sensor.' + TYPE + '_mileage_today'}"
    row: &mileageRow
      type: conditional
      conditions:
        - entity: "${'sensor.required_' + TYPE + '_mileage_for_today'}"
          state_not: "0"
      row:
        type: custom:bar-card
        entity: "${'sensor.' + TYPE + '_mileage_today'}"
        icon: "${'mdi:' + TYPE}"
        name: "${getDisplay(TYPE)}"
        min: 0
        max: "${parseFloat(states['sensor.required_' + TYPE + '_mileage_for_today'].state)}"
        entity_row: true
        positions:
          value: "off"
        severity:
          - from: 0
            to: "${parseFloat(states['sensor.required_' + TYPE + '_mileage_for_today'].state) - 0.11}"
            color: darkred
          - from: "${parseFloat(states['sensor.required_' + TYPE + '_mileage_for_today'].state) - 0.1}"
            to: "${parseFloat(states['sensor.required_' + TYPE + '_mileage_for_today'].state) + 10000000}"
            color: darkgreen
        style: &style |
          bar-card-contentbar {
            font-weight: bold;
            color: gold;
          }
          bar-card-name {
            margin-left: 10px;
          }
          bar-card-currentbar {
            border-radius: 10px;
          }
          bar-card-backgroundbar {
            border-radius: 10px;
          }

  - type: custom:config-template-card
    variables:
      TYPE: "'bike'"
      getDisplay: *getMileageDisplay
    entities: *mileageEntities
    row: *mileageRow

  - type: custom:config-template-card
    variables:
      TYPE: "'walk'"
      getDisplay: *getMileageDisplay
    entities: *mileageEntities
    row: *mileageRow

  - type: conditional
    conditions:
      - entity: calendar.next_lifting
        state: "on"
    row:
      type: custom:config-template-card
      variables:
        COUNT: states['sensor.lifting_sessions_today'].state
        getSessionStr: |
          count => {
            if (count == 1) {
              return 'session'
            } else {
              return 'sessions'  
            }
          }
      entities:
        - sensor.lifting_sessions_today
      row:
        type: custom:bar-card
        entity: sensor.lifting_sessions_today
        icon: mdi:weight-lifter
        name: "${parseInt(COUNT) >= 1 ? 'DONE! (' + COUNT + ' ' + getSessionStr(COUNT) + ')' : 'Weight Lifting Session'}"
        min: 0
        max: 1
        entity_row: true
        positions:
          value: "off"
        severity:
          - from: 0
            to: 0.99
            color: darkred
          - from: 1
            to: 100
            color: darkgreen
        style: *style

  - type: custom:config-template-card
    variables:
      GOAL: states['sensor.step_goal_today'].state
      STEPS: states['sensor.steps_today'].state
      addCommas: |
        num => {
          return num.toString().replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",")
        }
    entities:
      - sensor.step_goal_today
      - sensor.steps_today
    row:
      type: custom:bar-card
      entity: sensor.steps_today
      icon: mdi:shoe-print
      name: "${parseInt(STEPS) >= parseInt(GOAL) ? 'DONE! (' + addCommas(STEPS) + ' steps)' : addCommas(STEPS) + ' / ' + addCommas(GOAL) + ' steps today'}"
      min: 0
      max: "${GOAL}"
      entity_row: true
      positions:
        value: "off"
      severity:
        - from: 0
          to: "${parseInt(GOAL) - 1}"
          color: darkred
        - from: "${GOAL}"
          to: "${parseInt(GOAL) + 100000}"
          color: darkgreen
      style: *style

  - type: divider

  - type: custom:config-template-card
    variables:
      NUM: "'01'"
      getDisplay: &getChallengeDisplay |
        sensor_entity => {
            var state = states[sensor_entity].state
            var description = states[sensor_entity].attributes.description.replace('kilometers', 'km').replace('mile', 'mi')
            var display = states[sensor_entity].attributes.friendly_name + ': '

            if (state == 'inactive') {
              var days_until = Math.ceil((new Date(states[sensor_entity].attributes.start_date).getTime() - new Date().getTime()) / (1000*60*60*24))
              var day_label = days_until > 1 ? ' days' : ' day'
              display += description + ' (in ' + days_until + day_label + ')'
            } else if (states[sensor_entity].attributes.type == 'one_time_activity') {
              if (state == 'active') {
                display += description
              } else {
                display += 'DONE! (' + description + ')'
              }
            } else {
              var units = states[sensor_entity].attributes.units
              var current_progress = states[sensor_entity].attributes.current_progress.toString().replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",")
              if (state == 'active') {
                var days_remaining = Math.ceil((new Date(states[sensor_entity].attributes.end_date).getTime() - new Date().getTime()) / (1000*60*60*24))
                var day_label = days_remaining > 1 ? ' days' : ' day'
                var goal = states[sensor_entity].attributes.goal.toString().replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",")
                display += current_progress + ' / ' + goal + ' ' + units + ' (' + days_remaining + day_label + ' remaining)'
              } else {
                display += 'DONE! ' + current_progress + ' ' + units
              }
            }
            return display
          }
    entities: &challengeEntities
      - "${'sensor.template_garmin_challenge_' + NUM}"
    row: &challengeRow
      type: conditional
      conditions:
        - entity: "${'sensor.template_garmin_challenge_' + NUM}"
          state_not: "unknown"
      row:
        type: custom:bar-card
        entity: "${'sensor.template_garmin_challenge_' + NUM}"
        attribute: current_progress
        name: "${getDisplay('sensor.template_garmin_challenge_' + NUM)}"
        min: 0
        max: "${states['sensor.template_garmin_challenge_' + NUM].attributes.goal}"
        entity_row: true
        positions:
          value: "off"
        severity:
          - from: 0
            to: "${states['sensor.template_garmin_challenge_' + NUM].attributes.goal - 0.01}"
            color: darkred
          - from: "${states['sensor.template_garmin_challenge_' + NUM].attributes.goal}"
            to: "${states['sensor.template_garmin_challenge_' + NUM].attributes.goal + 100000}"
            color: darkgreen
        style: *style

  - type: custom:config-template-card
    variables:
      NUM: "'02'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'03'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'04'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'05'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'06'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'07'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'08'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'09'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'10'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'11'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'12'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'13'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'14'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow

  - type: custom:config-template-card
    variables:
      NUM: "'15'"
      getDisplay: *getChallengeDisplay
    entities: *challengeEntities
    row: *challengeRow
