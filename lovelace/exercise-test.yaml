type: entities
view_layout:
  grid-area: exercise
card_mod:
  style: |
    ha-card {
      border-radius: 10px;
    }
title: Exercise Progress
entities:
  - type: custom:config-template-card
    variables:
      TYPE: '''run'''
      getDisplay: &getMileageDisplay |
        type => {
          var current_mileage = parseFloat(states['sensor.' + type + '_mileage_today'].state)
          var required_mileage = parseFloat(states['sensor.required_' + type + '_mileage_for_today'].state)
          if (current_mileage >= required_mileage) {
            return 'DONE! (' + current_mileage + ' miles)'
          } else {
            return current_mileage + ' / ' + required_mileage + ' miles completed'
          }
        }
    entities: &mileageEntities
      - "${'sensor.required_' + TYPE + '_mileage_for_today'}"
      - "${'sensor.' + TYPE + '_mileage_today'}"
    row: &mileageRow
      type: conditional
      conditions:
        - entity: "${'sensor.required_' + TYPE + '_mileage_for_today'}"
          state_not: '0'
      row:
        type: custom:bar-card
        entity: "${'sensor.' + TYPE + '_mileage_today'}"
        icon: "${'mdi:' + TYPE}"
        name: "${getDisplay(TYPE)}"
        min: 0
        max: "${parseFloat(states['sensor.required_' + TYPE + '_mileage_for_today'].state)}"
        entity_row: true
        positions:
          value: 'off'
        severity:
          - from: 0
            to: "${parseFloat(states['sensor.required_' + TYPE + '_mileage_for_today'].state) - 0.01}"
            color: darkred
          - from: "${parseFloat(states['sensor.required_' + TYPE + '_mileage_for_today'].state)}"
            to: "${parseFloat(states['sensor.required_' + TYPE + '_mileage_for_today'].state) + 10000000}"
            color: darkgreen
        style: &style |
          bar-card-contentbar {
            font-weight: bold;
            color: gold;
          }
          bar-card-name {
            margin-left: 10px;
          }
          bar-card-currentbar {
            border-radius: 10px;
          }
          bar-card-backgroundbar {
            border-radius: 10px;
          }

  - type: custom:config-template-card
    variables:
      TYPE: '''bike'''
      getDisplay: *getMileageDisplay
    entities: *mileageEntities
    row: *mileageRow

  - type: custom:config-template-card
    variables:
      TYPE: '''walk'''
      getDisplay: *getMileageDisplay
    entities: *mileageEntities
    row: *mileageRow

  - type: conditional
    conditions:
      - entity: calendar.next_lifting
        state: 'on'
    row:
      type: custom:config-template-card
      variables:
        COUNT: states['sensor.lifting_sessions_today'].state
        getSessionStr: |
          count => {
            if (count == 1) {
              return 'session'
            } else {
              return 'sessions'  
            }
          }
      entities:
        - sensor.lifting_sessions_today
      row:
        type: custom:bar-card
        entity: sensor.lifting_sessions_today
        icon: mdi:weight-lifter
        name: "${parseInt(COUNT) >= 1 ? 'DONE! (' + COUNT + ' ' + getSessionStr(COUNT) + ')' : ''}"
        min: 0
        max: 1
        entity_row: true
        positions:
          value: 'off'
        severity:
          - from: 0
            to: 0.99
            color: darkred
          - from: 1
            to: 100
            color: darkgreen
        style: *style

  - type: custom:config-template-card
    variables:
      GOAL: states['sensor.step_goal_today'].state
      STEPS: states['sensor.steps_today'].state
    entities:
      - sensor.step_goal_today
      - sensor.steps_today
    row:
      type: custom:bar-card
      entity: sensor.steps_today
      icon: mdi:shoe-print
      name: "${parseInt(STEPS) >= parseInt(GOAL) ? 'GOAL MET! (' + STEPS + ' steps)' : STEPS + ' / ' + GOAL + ' steps today'}"
      min: 0
      max: "${GOAL}"
      entity_row: true
      positions:
        value: 'off'
      severity:
        - from: 0
          to: "${parseInt(GOAL) - 1}"
          color: darkred
        - from: "${GOAL}"
          to: "${parseInt(GOAL) + 100000}"
          color: darkgreen
      style: *style

  - type: divider